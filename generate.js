"use strict";
const polygon_hires = [
  [-74.711580, 42.517799], [-74.698442, 42.533559], [-74.686092, 42.548214],
  [-74.681579, 42.553578], [-74.681471, 42.553706], [-74.672428, 42.564455],
  [-74.672018, 42.564836], [-74.657468, 42.586721], [-74.655641, 42.589145],
  [-74.640454, 42.612335], [-74.639524, 42.613935], [-74.632974, 42.623430],
  [-74.630652, 42.626770], [-74.631126, 42.628931], [-74.634011, 42.644379],
  [-74.634637, 42.647809], [-74.635302, 42.649733], [-74.635763, 42.651981],
  [-74.638844, 42.661558], [-74.639515, 42.663654], [-74.649074, 42.694348],
  [-74.659304, 42.727463], [-74.659509, 42.728038], [-74.660305, 42.730275],
  [-74.664666, 42.742678], [-74.664889, 42.743266], [-74.667512, 42.750710],
  [-74.668031, 42.764592], [-74.665217, 42.792237], [-74.648298, 42.829558],
  [-74.597718, 42.819622], [-74.594261, 42.818782], [-74.583047, 42.816688],
  [-74.562477, 42.812916], [-74.555959, 42.810669], [-74.554078, 42.809863],
  [-74.543382, 42.805942], [-74.543271, 42.805902], [-74.535628, 42.803100],
  [-74.534837, 42.802810], [-74.520773, 42.797624], [-74.514654, 42.795337],
  [-74.509959, 42.793560], [-74.505981, 42.792050], [-74.478001, 42.781696],
  [-74.477613, 42.780455], [-74.476343, 42.781074], [-74.466253, 42.777280],
  [-74.463276, 42.776133], [-74.458564, 42.774357], [-74.454911, 42.772979],
  [-74.450783, 42.773312], [-74.411384, 42.776490], [-74.392493, 42.778016],
  [-74.392231, 42.778037], [-74.351031, 42.781270], [-74.349703, 42.781376],
  [-74.338796, 42.782241], [-74.324717, 42.783428], [-74.299429, 42.783610],
  [-74.289446, 42.783805], [-74.265290, 42.795581], [-74.263314, 42.796534],
  [-74.260457, 42.795120], [-74.256547, 42.795870], [-74.254442, 42.795297],
  [-74.253884, 42.794504], [-74.253433, 42.790533], [-74.251808, 42.789117],
  [-74.249573, 42.788267], [-74.248131, 42.786886], [-74.248062, 42.784570],
  [-74.251633, 42.780889], [-74.254379, 42.776006], [-74.254410, 42.772237],
  [-74.252548, 42.768447], [-74.251480, 42.766096], [-74.252815, 42.763490],
  [-74.255292, 42.760701], [-74.258034, 42.758771], [-74.258507, 42.757398],
  [-74.263839, 42.755567], [-74.269722, 42.757368], [-74.275444, 42.756792],
  [-74.286988, 42.756685], [-74.293168, 42.755762], [-74.298311, 42.754450],
  [-74.304811, 42.752187], [-74.305932, 42.751493], [-74.306665, 42.750074],
  [-74.305176, 42.747242], [-74.292035, 42.734120], [-74.282184, 42.724203],
  [-74.277840, 42.719472], [-74.270768, 42.719542], [-74.271881, 42.715712],
  [-74.272295, 42.714270], [-74.259466, 42.715278], [-74.243059, 42.716682],
  [-74.241014, 42.716857], [-74.239846, 42.718924], [-74.202713, 42.710826],
  [-74.198024, 42.711251], [-74.184299, 42.712494], [-74.182678, 42.719360],
  [-74.180274, 42.729979], [-74.172928, 42.723964], [-74.171558, 42.722842],
  [-74.164678, 42.717207], [-74.164769, 42.716760], [-74.165066, 42.715304],
  [-74.166241, 42.709536], [-74.169525, 42.691365], [-74.168756, 42.679452],
  [-74.168525, 42.674310], [-74.169436, 42.669462], [-74.169725, 42.667426],
  [-74.170088, 42.666635], [-74.171166, 42.664544], [-74.173546, 42.659247],
  [-74.173428, 42.657318], [-74.174934, 42.655661], [-74.179324, 42.646384],
  [-74.182059, 42.641788], [-74.184235, 42.639622], [-74.185960, 42.636717],
  [-74.192024, 42.627849], [-74.192569, 42.627069], [-74.192731, 42.625658],
  [-74.193495, 42.618999], [-74.201316, 42.611240], [-74.205223, 42.607431],
  [-74.210509, 42.600990], [-74.215166, 42.597435], [-74.219614, 42.591406],
  [-74.220012, 42.588021], [-74.220274, 42.585412], [-74.233995, 42.575688],
  [-74.236954, 42.564971], [-74.237081, 42.564629], [-74.237621, 42.563124],
  [-74.236959, 42.560120], [-74.241572, 42.550802], [-74.237977, 42.544593],
  [-74.238151, 42.543857], [-74.234419, 42.537840], [-74.229065, 42.529030],
  [-74.225639, 42.526403], [-74.225453, 42.519225], [-74.225633, 42.515948],
  [-74.225186, 42.511180], [-74.224985, 42.508550], [-74.225772, 42.506956],
  [-74.226568, 42.502633], [-74.226447, 42.499233], [-74.228501, 42.494381],
  [-74.230217, 42.492071], [-74.234037, 42.487740], [-74.236447, 42.485459],
  [-74.241629, 42.472036], [-74.244484, 42.470182], [-74.252424, 42.445369],
  [-74.256018, 42.437915], [-74.264731, 42.420127], [-74.264755, 42.418876],
  [-74.263469, 42.407127], [-74.254303, 42.408207], [-74.254270, 42.408102],
  [-74.245195, 42.378799], [-74.244692, 42.377159], [-74.246454, 42.378852],
  [-74.247026, 42.379152], [-74.255060, 42.379824], [-74.258911, 42.379151],
  [-74.260398, 42.378400], [-74.261513, 42.376951], [-74.265357, 42.374560],
  [-74.267900, 42.371746], [-74.269549, 42.368354], [-74.273474, 42.365032],
  [-74.276645, 42.363349], [-74.281931, 42.362773], [-74.284033, 42.361761],
  [-74.293001, 42.361210], [-74.299468, 42.362575], [-74.303797, 42.361010],
  [-74.308546, 42.359817], [-74.312582, 42.357090], [-74.317501, 42.360007],
  [-74.320965, 42.360661], [-74.324843, 42.359834], [-74.329364, 42.357375],
  [-74.332793, 42.357150], [-74.337012, 42.358282], [-74.340968, 42.358479],
  [-74.346087, 42.355691], [-74.348139, 42.357997], [-74.351969, 42.360280],
  [-74.355323, 42.361142], [-74.357170, 42.364656], [-74.359999, 42.366175],
  [-74.363362, 42.367423], [-74.366547, 42.367776], [-74.371723, 42.370145],
  [-74.374590, 42.370129], [-74.376179, 42.370655], [-74.378319, 42.372487],
  [-74.379051, 42.373873], [-74.383969, 42.372565], [-74.418951, 42.362194],
  [-74.431810, 42.358436], [-74.438155, 42.356580], [-74.443506, 42.355017],
  [-74.456224, 42.360126], [-74.467889, 42.364811], [-74.476274, 42.368178],
  [-74.498953, 42.377146], [-74.517562, 42.384484], [-74.526693, 42.388085],
  [-74.543474, 42.394704], [-74.552586, 42.398299], [-74.567524, 42.404193],
  [-74.588861, 42.412583], [-74.617778, 42.423946], [-74.618895, 42.424389],
  [-74.645847, 42.451600], [-74.657011, 42.462885], [-74.664092, 42.470043],
  [-74.671619, 42.477652], [-74.695644, 42.501823], [-74.699859, 42.506050],
  [-74.703761, 42.509962],
];
const polygon_lores = [
  [-74.672428, 42.564455], [-74.630631, 42.626674], [-74.634637, 42.647809],
  [-74.667512, 42.750710], [-74.665383, 42.791873], [-74.648298, 42.829558],
  [-74.562477, 42.812916], [-74.454911, 42.772979], [-74.411384, 42.776490],
  [-74.289446, 42.783805], [-74.263314, 42.796534], [-74.248062, 42.784570],
  [-74.258797, 42.757135], [-74.286988, 42.756685], [-74.305330, 42.747396],
  [-74.272295, 42.714270], [-74.239846, 42.718924], [-74.184235, 42.712500],
  [-74.180274, 42.729979], [-74.164678, 42.717207], [-74.169725, 42.667426],
  [-74.193495, 42.618999], [-74.233995, 42.575688], [-74.241572, 42.550802],
  [-74.234419, 42.537840], [-74.225639, 42.526403], [-74.228501, 42.494381],
  [-74.244457, 42.470265], [-74.264863, 42.419863], [-74.263469, 42.407127],
  [-74.254303, 42.408207], [-74.244692, 42.377159], [-74.259186, 42.379117],
  [-74.276645, 42.363349], [-74.346087, 42.355691], [-74.379051, 42.373873],
  [-74.443506, 42.355017], [-74.618895, 42.424389], [-74.711580, 42.517799],
];
const polygon = process.argv.includes("--hires")? polygon_hires: polygon_lores;
const centroid_lon = -74.44214;
const centroid_lat = 42.58822;

// Convert from equirectangular to gnomonic.
const rad = Math.PI / 180;
function sin(x) { return Math.sin(x * rad); }
function cos(x) { return Math.cos(x * rad); }
for(const point of polygon) {
  const lon = point[0];
  const lat = point[1];
  const cos_c = sin(centroid_lat) * sin(lat) + cos(centroid_lat) * cos(lat) * cos(lon - centroid_lon);
  const x = sin(lat) * sin(lon - centroid_lon) / cos_c;
  const y = (cos(centroid_lat) * sin(lat) - sin(centroid_lat) * cos(lat) * cos(lon - centroid_lon)) / cos_c;
  point[0] = x;
  point[1] = -y;
}

// Scale to 0..1.
let min_x = Infinity;
let min_y = Infinity;
let max_x = -Infinity;
let max_y = -Infinity;
for(const [x, y] of polygon) {
  min_x = Math.min(x, min_x);
  min_y = Math.min(y, min_y);
  max_x = Math.max(x, max_x);
  max_y = Math.max(y, max_y);
}
const width = Math.round((max_x - min_x) * 999 / Math.max(max_x - min_x, max_y - min_y));
const height = Math.round((max_y - min_y) * 999 / Math.max(max_x - min_x, max_y - min_y));
for(const point of polygon) {
  point[0] = (point[0] - min_x) * width / (max_x - min_x);
  point[1] = (point[1] - min_y) * height / (max_y - min_y);
}

function poly(points, color) {
  return "<path d=\"M" + Math.round(points[0][0]) + " " + Math.round(points[0][1]) + "L" + points.slice(1).map(([x, y]) => Math.round(x) + " " + Math.round(y)).join(" ") + "Z\" fill=\"" + color + "\"/>";
}

console.log("<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 " + width + " " + height + "\">");

console.log(poly(polygon, "#0071cd"));

const center_x = min_x * width / (min_x - max_x);
const center_y = min_y * height / (min_y - max_y);
const radius = 200;
console.log("<g transform=\"translate(" + Math.round(center_x) + "," + Math.round(center_y) + ") scale(" + (radius / 43) + ")\"><circle r=\"37.5\" style=\"stroke:#fff;stroke-width:11;fill:#0071cd\"/><path d=\"M-14.5,-17.5v35h16.5a17.5,17.5 0 0,0 0,-35zM-4.5,-9h5a9,9 0 0,1 0,18h-5z\" style=\"fill:#fff\"/></g>");

console.log("</svg>");
